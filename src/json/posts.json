[
    {
        "id": 1,
        "titulo": "Princípios da Programação",
        "texto": "> Fonte: <https://medium.com/@amndalsr/princípios-da-programação-cf98ed5d198f> \n\n Princípios da programação são fundamentos que vai nos servir como um guia durante o desenvolvimento de um software, ajudando a pensar em soluções eficientes e a escrever códigos de boa qualidade também, o que vai ajudar com a manutenção e a evolução constante desse código. \n\n ### Por que esses Princípios importam? \n\n Imagine construir uma casa sem os fundamentos de arquitetura, por exemplo, o resultado disso não seria muito bom. No desenvolvimento de software, os princípios de programação atuam como esses fundamentos, orientando na hora de criar sistemas que não apenas atendem às necessidades naquele momento, mas conseguem evoluir com o tempo.  \n\n Embora existam muitos princípios específicos para diferentes paradigmas de programação e linguagens, alguns são muito famosos e podem ser aplicados de maneira geral. Nesse artigo vou te mostrar alguns dos mais importantes:  \n\n ### KISS (Keep It Simple, Stupid) \n\n Simplicidade é a chave para o desenvolvimento eficiente. O princípio KISS afirma que a maioria dos sistemas funciona melhor se forem mantidos simples em vez de complicados; portanto, a simplicidade deve ser um objetivo chave no projeto, e a complexidade desnecessária deve ser evitada. \n\n ### YAGNI (You Aren’t Gonna Need It) \n\n NAntecipar necessidades futuras pode levar a um código sobrecarregado de funcionalidades nunca usadas. YAGNI é um lembrete para construir apenas o necessário e resistir a tentação de implementar “soluções para problemas que ainda não existem”. Esta abordagem não só economiza tempo como mantém o foco na eficiência e relevância. \n\n ### O Fundamento SOLID  \n\n O SOLID representa cinco princípios que juntos fornecem um roteiro para o design de software de alta qualidade. A beleza do SOLID está na sua capacidade de tornar o código mais modular, flexível e, consequentemente, mais fácil de entender e manter. \n\n ### S: Single Responsibility Principle (SRP) \n\n A noção de que uma classe deve ter apenas uma responsabilidade é revolucionária em sua simplicidade e impacto. Ao seguir o SRP, reduzimos a complexidade, facilitando a manutenção e a evolução do código. \n\n ### O: Open/Closed Principle (OCP) \n\n Software deve ser aberto para extensão, mas fechado para modificação. Este princípio promove a ideia de que podemos adicionar novas funcionalidades sem alterar o código existente. Isso é alcançado através do uso de abstrações, garantindo que o software seja adaptável às mudanças com impacto mínimo. \n\n ### L: Liskov Substitution Principle (LSP) \n\n O princípio de substituição de Liskov fortalece a arquitetura de software ao garantir que subclasses possam substituir suas classes-base sem alterar o comportamento esperado do programa. Isso promove a reusabilidade e a robustez do código. \n\n ### I: Interface Segregation Principle (ISP) \n\n ISP defende o uso de interfaces personalizadas para cada cliente, em detrimento de uma única interface ampla e genérica. Esse princípio contribui para uma arquitetura de software mais organizada e eficiente, garantindo que os clientes interajam apenas com os componentes relevantes para suas necessidades. \n\n ### D: Dependency Inversion Principle (DIP) \n\n Por fim, o DIP nos lembra da importância de depender de abstrações em vez de implementações concretas. Isso facilita a desacoplar componentes, tornando o sistema mais flexível e facilitando testes e manutenção. \n\n ### Conclusão \n\n Adotar esses princípios não é apenas uma questão acadêmica; é uma mudança que pode realmente transformar a qualidade do nosso trabalho. Quando aplicamos esses conceitos, percebemos que nossos projetos se tornam mais manejáveis, nosso código fica mais claro e o trabalho em equipe flui melhor devido à consistência e previsibilidade. \n\n Pense em um cenário onde cada linha de código não é apenas escrita para cumprir sua função imediata, mas é considerada como parte de um todo maior, projetado para ser adaptável, claro e eficiente. É esse tipo de ambiente que os princípios da programação nos ajudam a criar. Ao adotá-los, estamos construindo um mundo onde a tecnologia é mais acessível, colaborativa e eficaz."
    },
    {
        "id": 2,
        "titulo": "Rubber Duck Debugging",
        "texto": "> Fonte: <https://medium.com/@amndalsr/rubber-duck-debugging-5ea10f69cd32> \n\n  Quem nunca ouviu dizer que é mais fácil aprender ensinado? Essa abordagem, apesar de simples, é muito eficaz e tem ajudado muitos desenvolvedores que vezes se sentem travados olhando para a tela sem conseguir evoluir. É nessas horas que o nosso patinho de borracha entra em ação como um parceiro crucial para o processo de depuração. \n\n ### Como funciona? \n\n Rubber Duck Debugging é um método de depuração onde o programador vai explicar seu código linha por linha em voz alta para um objeto inanimado, como um patinho de borracha. \n\n A ideia é que ao explicar para o patinho assumindo que ele não sabe nada sobre o assunto, isso vai aumentar sua atenção e te fazer explicar com mais detalhes. Em outras palavras, você vai estar “pensando alto”, conservando consigo mesmo até encontrar uma solução. \n\n ### Passos importantes \n\n - **Escolha seu ouvinte:** embora o patinho seja o objeto tradicional, qualquer objeto pode servir. \n\n - **Explique o problema:** comece a explicar seu código e objetivos. \n\n - **Vá linha por linha:** detalhe cade parte do código e do fluxo desejado. \n\n - **Expectativas:** explique o que você quer que cada linha faça. \n\n Ao fim da conversa com o seu patinho, é provável que a solução tenha surgido e você pode ter encontrando apenas um erro de digitação ou de lógica. Mas caso identifique que o problema é mais sério, não exite em pedir ajuda a um colega ou especialista. \n\n ### Como surgiu esse método? \n\n A deia desse método vem do livro “O Programador Pragmático” de Andrew Hunt e David Thomas, onde contam a história de um programador que carregava um patinho de borracha com ele e explicava seu código para o patinho, na tentativa de encontrar erros ou problemas. O ato de explicar o problema em voz alta o ajudava a pensar sobre o código de uma maneira diferente, levando-o a ter percepções que resolviam o problema. \n\n ### Conclusão \n\n Esse método reforça que às vezes a solução mais eficaz para um problema não é a mais tecnologicamente avançada, mas a mais humana. Ao abraçar a simplicidade e a importância da clareza, podemos não apenas melhorar nosso código, mas também aprimorar nossa capacidade de resolver problemas de maneiras criativas e eficientes. \n\n Então, da próxima vez que se encontrar preso em um problema, considere dar uma chance ao seu patinho de borracha… você pode se surpreender."
    },
    {
        "id": 3,
        "titulo": "Entendendo o Padrão de Projeto Abstract Factory",
        "texto": "> Fonte: <https://medium.com/@amndalsr/entendendo-o-padrão-de-projeto-abstract-factory-61ecaa8cbfcf> \n\n  Imagine que você precisa montar um kit de ferramentas. Em vez de comprar as ferramentas individualmente você compra kits prontos para executar as tarefas que você precisa. O padrão **“Abstract Factory”** funciona de forma semelhante, mas no mundo do desenvolvimento de software. \n\n ### Por que Padrões de Projeto são importantes? \n\n De forma simplificada os Padrões de projeto são como receitas de bolo. Eles nos dão uma solução testada e comprovada para problemas comuns no design de software, economizando tempo e evitando erros. \n\n ### O Padrão de Projeto Abstract Factory \n\n Podemos pensar no **“Abstract Factory”** como uma fábrica que produz fábricas menores (sim, parece confuso!). Por exemplo, se você tem um software que pode ser usado em Windows e Mac, em vez de escrever códigos específicos para cada um, você simplesmente usa a “fábrica” correta que cria tudo o que você precisa para aquele sistema específico. \n\n ### Componente deste padrão: \n\n - **Fábrica Abstrata:** É como uma loja onde você sabe que pode comprar kits, mas não os itens individuais. \n\n - **Fábrica Concreta:** São os kits reais , como um kit de ferramentas para carpintaria, por exemplo. \n\n - **Produto Abstrato:** É o conceito geral do que cada kit terá. Pode incluir martelo, chave de fenda, etc. \n\n - **Produto Concreto:** São os itens reais em cada kit. O martelo no kit de carpintaria pode ser diferente do martelo no kit de alvenaria. \n\n - **Cliente:** É você! Ou qualquer pessoa que quer um kit pronto em vez de escolher cada item individualmente. \n\n ### Por que Uar o Abstract Factory? \n\n - **Sem Surpresas:** Como os kits já são prontos, você sempre sabe o que está recebendo. \n\n - **Flexibilidade:** Quer mudar do Windows para o Mac? Basta trocar a fábrica. \n\n - **Consistência:** Todos os itens de um kit são feitos para funcionar bem juntos. \n\n **A parte ruim?** Se amanhã sair uma nova ferramenta revolucionária para carpinteiros, por exemplo, todos os kits de carpintaria precisarão ser atualizados. Isso pode ser um desafio com o padrão Abstract Factory. \n\n ### Quando usar o Abstract Factory \n\n - Se você tem produtos que devem ser usados juntos e não quer misturá-los acidentalmente. \n\n - Quando você tem várias versões de algo e quer mudar facilmente entre elas. \n\n ### Exemplo Prático: \n\n Imagine um jogo de computador que pode ser jogado tanto em PC quanto em consoles. Em vez de programar tudo duas vezes, os desenvolvedores podem criar duas “fábricas”, uma para PC e outra para consoles. Cada fábrica gera os gráficos, sons e controles adequados para sua plataforma. \n\n ### Concluindo  \n\n O padrão **Abstract Factory** é uma maneira incrível de organizar e simplificar o código, especialmente quando você tem várias partes que precisam trabalhar juntas. Pense nele da próxima vez que você estiver trabalhando em um projeto complexo! "
    },
    {
        "id": 4,
        "titulo": "Entendendo o Padrão de Porjeto Strategy",
        "texto": "> Fonte: <https://medium.com/@amndalsr/entendendo-o-padrão-de-projeto-strategy-d298ed9875de> \n\n  Desenvolver um software é uma tarefa que exige a tomada de muitas decisões importantes, uma delas é a escolha da estratégia de implementação para uma funcionalidade específica. **O Padrão de Projeto Strategy** é uma das ferramentas que pode ser usada para tomar essas decisões de design de forma eficiente e flexível. \n\n Neste artigo vamos explorar os conceitos fundamentais desse padrão de projeto e como ele poder ser aplicado no desenvolvimento de software. \n\n ### O que é o Padrão de Projeto Strategy? \n\n O padrão de projeto Strategy é um dos pilares do mundo do design de software. Ele pertence à categoria dos padrões comportamentais definidos no livro **“Design Patterns: Elements of Reusable Object-Oriented Software”** de Erich Gamma, Richard Helm, Ralph Johnson e John Vlissides (também conhecido como **“Gang of Four”**). Ele se encaixa nessa categoria de padrões comportamentais porque se concentra em como os objetos interagem e comunicam entre si. \n\n Em termos simples, o padrão Strategy permite que você defina uma família de algoritmos, coloque cada um deles em uma classe separada e torne esses algoritmos intercambiáveis. Isso significa que você pode alterar a estratégia usada em tempo de execução sem alterar o cliente que a utiliza. \n\n ### Componentes do Padrão Strategy \n\n O padrão Strategy envolve três componentes principais: \n\n - **Contexto** (Context): Este é o objeto que precisa de uma estratégia. Ele mantém uma referência a uma estratégia concreta e pode alternar entre diferentes estratégias em tempo de execução. \n\n - **Estratégia** (Strategy): Esta é a interface que define os métodos que todas as estratégias concretas devem implementar. Ela estabelece um contrato que todas as estratégias devem seguir. \n\n - **Estratégia Concreta** (Concrete Strategy): São as classes que implementam a interface Estratégia. Cada classe concreta representa uma estratégia específica que o contexto pode utilizar. \n\n ### Vantagens do Padrão Strategy \n\n **Flexibilidade:** O padrão Strategy permite que você altere o comportamento de um objeto em tempo de execução, sem afetar o código cliente. \n\n **Reutilização de código:** Como as estratégias são independentes, elas podem ser reutilizadas em diferentes partes do código, promovendo a reutilização e a manutenção mais fácil.\n\n **Separação de responsabilidades:** O padrão ajuda a separar a lógica de negócios do código que a utiliza, promovendo uma arquitetura mais limpa e organizada. \n\n ### Implementação em Programação \n\n Trazendo esse conceito que acabamos de ver para a programação, vamos supor que estamos desenvolvendo um sistema de pagamento online e desejamos oferecer várias opções de pagamento aos clientes, como cartão de crédito, PayPal e Bitcoin. Podemos usar o padrão Strategy para implementar essas opções de pagamento. \n\n Cada opção de pagamento é uma estratégia diferente para processar pagamentos. Criamos então uma **interface** comum, PaymentStrategy, que define um método **processPayment()**. Em seguida, criamos classes concretas que implementam essa interface, como **CreditCardPayment**, **PayPalPayment** e **BitcoinPayment.** \n\n No momento do pagamento, o sistema pode escolher dinamicamente a estratégia de pagamento apropriada com base na preferência do usuário. Isso mantém nosso sistema flexível para adicionar novas estratégias de pagamento no futuro sem modificar o código existente. \n\n Vamos visualizar melhor com o código: \n\n  ``` \n\n cinterface PaymentStrategy { \n\n       void processPayment(double amount); \n\n } \n\n ``` \n\n Aqui, definimos uma interface chamada **PaymentStrategy** que contém um único método **processPayment(double amount)**. Esta interface representa a estratégia de pagamento que será implementada por classes concretas. \n\n  ``` \n\n class CreditCardPayment implements PaymentStrategy { \n\n       @Override \n\n       public void processPayment(double amount) { \n\n          System.out.println('Pagamento de R$' + amount + ' feito com cartão de crédito');\n\n       } \n\n } \n\n ``` \n\n **CreditCardPayment**, **PayPalPayment** e **BitcoinPayment** são classes que implementam a interface **PaymentStrategy**. Cada uma delas fornece uma implementação específica do método **processPayment**, que imprime uma mensagem indicando o tipo de pagamento e o valor. \n\n ``` \n\n class ShoppingCart { \n\n       private PaymentStrategy paymentStrategy; \n\n       public void setPaymentStrategy(PaymentStrategy paymentStrategy) { \n\n          this.paymentStrategy = paymentStrategy; \n\n       } \n\n       public void checkout(double totalAmount) { \n\n          if (paymentStrategy != null) { \n\n             paymentStrategy.processPayment(totalAmount); \n\n          } else { \n\n             System.out.println('Selecione uma estratégia de pagamento antes do checkout.'); \n\n          } \n\n       } \n\n } \n\n ``` \n\n **ShoppingCart** é a classe que representa o carrinho de compras. Ela possui uma referência privada para a estratégia de pagamento atualmente selecionada. O método **setPaymentStrategy** permite definir a estratégia de pagamento desejada e o método **checkout** realiza o pagamento com base na estratégia de pagamento selecionada. Se nenhuma estratégia de pagamento for definida, ele imprime uma mensagem de aviso. \n\n ``` \n\n public class Main { \n\n       public static void main(String[] args) { \n\n          ShoppingCart cart = new ShoppingCart(); \n\n          PaymentStrategy creditCardPayment = new CreditCardPayment(); \n\n          cart.setPaymentStrategy(creditCardPayment); \n\n       } \n\n } \n\n ``` \n\n Por fim temos a classe **Main** onde é criado o carrinho de compras e escolhida a estratégia de pagamento que pode ser dinâmica. \n\n ### Conclusão \n\n Espero que esse artigo tenha te ajudado a entender o padrão de projeto Strategy que é uma ferramenta poderosa para tornar o código mais flexível, reutilizável e fácil de manter, já que ele permite que você encapsule diferentes algoritmos em classes separadas, tornando a troca entre eles uma tarefa simples. "
    },
    {
        "id": 5,
        "titulo": "Revisando Programação Orientada a Objetos",
        "texto": "> Fonte: <https://www.alura.com.br/artigos/construa-css-magico-variaveis-nativas> \n\n  Provavelmente, ao construir um website, você já deve ter reparado que muitos dos valores nos arquivos CSS são dados que se repetem constantemente, não é mesmo? Por exemplo, a paleta de cores que mantém o padrão visual da página é reutilizada em inúmeros pontos do código. Sendo assim, fazer a manutenção do projeto e alterar esses valores manualmente pode se tornar uma tarefa trabalhosa e passiva de erros, ainda mais em aplicações de grande escala.  \n\n Mas então, como podemos melhorar essa situação? \n\n Uma boa alternativa é utilizar as **Variáveis no CSS** como aliadas!  \n\n Se você ficou interessado e deseja descobrir como fazer isso, vem comigo que nesse artigo eu te ensinarei mais sobre esse assunto detalhadamente. \n\n ## Mas primeiro, o que são Variáveis de CSS? \n\n As variáveis de CSS, que também são chamadas de propriedades customizadas, trazem grandes benefícios e vão funcionar de forma bem semelhante às variáveis de linguagens de programação, ou seja, sua maior função é armazenar valores que serão utilizados posteriormente no código.  \n\n Elas permitem criar valores para todas as propriedades de CSS, sendo bastante utilizadas para gerenciar cores, fontes, valores de animações etc. \n\n ## Como utilizar as Variáveis de CSS? \n\n As variáveis de CSS tem acesso ao DOM, o que permite que sejam declaradas globalmente ou localmente. Além disso, possuem uma sintaxe característica que já tivemos um pequeno spoiler na imagem acima. Vamos entender melhor como funciona? \n\n ### Sintaxe \n\n A declaração ou criação de uma variável no arquivo CSS é composta por 4 partes, veja a seguir: \n\n - **1º:** Dois hífens (--) \n\n - **2º:** Nomeação da variável \n\n - **3º:** Dois pontos (:) \n\n - **4º:** Valor da variável \n\n É importante destacar que alguns caracteres não são permitidos na nomeação, como por exemplo: ; # } ] ) etc. \n\n A aplicação das variáveis dentro de um elemento HTML em uma determinada propriedade CSS, é feita por meio da associação entre a função `var()` e o nome da variável, que é passada como parâmetro dentro dos parênteses. Dessa forma: \n\n ``` \n\n body { \n\n background: var(--global-primary-color); \n\n } \n\n ``` \n\n ### Declaração global \n\n Fazemos isso declarando a variável dentro da pseudo classe `:root`. Esse seletor corresponde a raiz, é o mesmo que `<html>` em si, só que possui uma especificidade maior. Por meio do root, estamos disponibilizando elas globalmente, podendo ser utilizadas em qualquer lugar do documento.  \n\n ### Declaração local \n\n Para isso, declaramos a variável dentro do seletor que irá utilizá-la. Assim, ficarão restritas ao escopo da onde elas foram declaradas, sendo herdadas apenas pelos elementos filhos. \n\n ## De onde surgiu? \n\n As variáveis são um recurso que durante muitos anos foi bastante solicitado. Isso porque, anteriormente, essa solução só era possível por meio de pré-processadores, como Sass, Stylus ou através de CSS in JS. Esses artifícios atuam como grandes parceiros, mas ainda sim havia algumas lacunas que faltavam ser preenchidas e que somente foram contempladas com as variáveis no CSS. \n\n O principal ponto a se destacar é que as variáveis de pré processadores são estáticas e necessitam da etapa de compilação, ou seja, todas as funções, mixins e interpolações que ocorrem no Sass retornam CSS puro, para serem interpretadas pelo navegador.  \n\n Já as variáveis de CSS funcionam em tempo de execução, são dinâmicas e funcionam de forma independente das tecnologias usadas, atuando em qualquer contexto, sem precisar de etapas adicionais. \n\n Além disso, ocorrem outras limitações com as variáveis de pré-processamento, como por exemplo a impossibilidade de uso de variáveis por meio do @extend nos medias query, a falta de aplicação da herança e efeito cascata nos elementos e como não há acesso ao DOM, não é possível serem controladas via JavaScript. \n\n ## E quais são as principais vantagens no uso? \n\n ### Código claro  \n\n Afinal, ler `--cor-principal-bordas` é muito mais semântico do que ler #B4E197, onde rapidamente conseguimos entender do que se trata.  \n\n ### Favorece a manutenção  \n\n É possível alterarmos a folha de estilo em muitos lugares, apenas alterando o valor da variável em um único lugar, o que otimiza o tempo de trabalho e evita que possíveis erros de escrita aconteçam. \n\n ### Criação de temas  \n\n Com as variáveis, você pode criar e editar facilmente seus guias de estilos ou construir de maneira mais facilitada temáticas, um exemplo clássico disso é na construção de light/dark mode e como as variáveis de CSS são dinâmicas e tem acesso ao DOM, é possível ter um controle maior por meio da manipulação via Java Script, veja um exemplo prático nesse [Alura+ de Dark Mode](https://cursos.alura.com.br/extra/alura-mais/dark-mode-um-projeto-em-html-css-c1369).  \n\n ## Conteúdo extra \n\n ### Cascata CSS \n\n São beneficiadas pela cascata do CSS, onde podemos atribuir um novo valor a uma variável, de modo que os elementos filhos irão herdar as características do seu elemento pai mais próximo. \n\n ### Relação com o @media query \n\n Atualmente, ainda não podemos utilizar variáveis como medidas de resolução de tela no @media query, dessa forma: \n\n ``` \n\n :root { \n\n --sm: 640px; \n\n } \n\n @media (max-width: var(--sm)) {   \n\n ... \n\n } \n\n ``` \n\n Ainda é necessário utilizar medidas fixas, mas dentro dos media queries é possível aplicar as variáveis, sem que haja problema algum. \n\n ``` \n\n :root { \n\n --color-text-desktop: red; \n\n --color-text-mobile: blue \n\n } \n\n h1 { \n\n color: var(--color-text-desktop) \n\n } \n\n @media (max-width: 640px) { \n\n h1 { \n\n color: var(--color-text-mobile) \n\n } \n\n } \n\n ``` \n\n ### Suporte ao navegador \n\n Segundo o site [Can I use](https://caniuse.com/?search=variables), em relação ao suporte aos navegadores, as variáveis são compatíveis em praticamente todos os navegadores modernos de maneira satisfatória.  \n\n ## Agora é com você!  \n\n Neste artigo, nós aprendemos sobre o poder do uso das variáveis no CSS em um projeto, entendemos melhor sobre os seus conceitos, vantagens e aplicação.  \n\n Para aprofundar o seu mergulho ainda mais no [desenvolvimento front-end](https://www.alura.com.br/artigos/o-que-e-front-end-e-back-end), enriquecer seu portfólio e aplicar as variáveis de CSS em diversos projetos incríveis, não deixe de realizar os cursos da [formação front-end](https://www.alura.com.br/formacao-front-end). \n\n Agora me conta, você já utilizava as variáveis em sua rotina de desenvolvimento? Se sim, te convido a contar para nós aqui no fórum ou no discord da Alura as suas impressões da prática com elas. E se você nunca tinha ouvido falar ou se este conteúdo te ajudou de alguma forma, não deixe de dar o seu feedback, sua opinião é muito valiosa para nós e nos ajudar a evoluir e te proporcionar cada vez mais uma melhor experiência de aprendizado.  \n\n Até a próxima e bons estudos!  \n\n "
    },
    {
        "id": 6,
        "titulo": "Paradigmas de Programação",
        "texto": "> Fonte: <https://www.alura.com.br/artigos/principais-comunidades-front-end> \n\n  Quando entramos na área da tecnologia é como se estivéssemos descobrindo um mundo completamente novo. E, nessa caminhada, você pode se sentir só e sem rumo. Então, para lhe mostrar que não tem apenas você nessa jornada, vou trazer nesse artigo algumas comunidades de [front-end](https://www.alura.com.br/artigos/o-que-e-front-end-e-back-end) para que possa conhecer e fazer parte. \n\n ## O que é uma comunidade?\n\n Comunidade é um grupo de pessoas que se reúnem para trocar ideias, dividir experiências e criar eventos (como palestras e workshops, que podem ser presenciais ou on-line). Nesses grupos, diversos temas são debatidos, principalmente sobre as principais demandas do mercado e as tendências da atualidade. \n\n Esses espaços são conhecidos por oferecerem bastante suporte, o que é incrível para quem está começando agora na carreira de dev. Neles, você encontrará desde as pessoas iniciantes até as mais experientes e todas estão dispostas a ajudar com qualquer dúvida. O fato é que uma pessoa antes de você já pode ter tido perguntas semelhantes às suas e, nesses grupos, você pode encontrar a solução rapidamente.\n\n Além disso, você pode se manter informado sobre as boas práticas, novidades, receber feedbacks, conhecer pessoas novas e se conectar com elas. Aliás, fazer networking é importante em qualquer área, pois, ao se conectar com diferentes tipos de pessoas, você não cresce apenas profissionalmente, mas como indivíduo também. \n\n Há muitas comunidades para pessoas desenvolvedoras por aí. Por isso,nesse artigo, irei trazer as principais comunidades voltadas para o Front-end.  \n\n Vamos lá?\n\n ## Comunidades do Front-end para fazer parte   \n\n### Stack Overflow\n\n O [Stack Overflow](https://pt.stackoverflow.com/) é um site de perguntas e respostas dedicado a pessoas que já programam ou que querem aprender a programar. A comunidade responde e faz perguntas constantemente, e as pessoas usuárias votam nas melhores para que elas subam no feed e sejam encontradas com mais facilidade. Existem muitas perguntas em inglês, mas, se você quiser, pode ir até a parte que está tudo em português. Legal, né? \n\n Você também ganha reputação quando vota nas suas perguntas e respostas. Em níveis mais altos, você ganha privilégios como a permissão de moderação e passa a ajudar a manter a qualidade do site e da comunidade. \n\n ### GitHub\n\n  O GitHub é uma plataforma onde você compartilha seu código e arquivos com controle de versão usando o Git. Ele é como uma rede social para pessoas que programam. Assim, você pode seguir pessoas, trocar mensagens e contribuir em projetos privados ou [Open Source](https://www.alura.com.br/artigos/open-source-uma-breve-introducao).\n\n  Apesar do GitHub ter muitas trocas em inglês, vou trazer aqui uma opção maravilhosa em português.  \n\n Na plataforma existe um fórum incrível chamado [Front-end Brasil](https://github.com/frontendbr). Ele foi criado com o objetivo de reunir dúvidas vindas de outras redes sociais, como Facebook, mas que acabavam perdidas depois de um tempo. Ou seja, as pessoas criadoras deste espaço queriam unificar todas as discussões em um só local e escolheram, justamente, o GitHub por ser mais fácil de encontrar dúvidas antigas. \n\n Na página principal tem o link que te leva para o fórum, outro para divulgação de vagas na área de Front-end e o terceiro link vai para a parte de eventos. O mais legal é que qualquer pessoa pode adicionar uma vaga, criar um evento ou dar sugestões, desde que esteja dentro das diretrizes do site, claro.  \n\n ### MDN Web Docs \n\n O [MDN Web Docs](https://developer.mozilla.org/pt-BR/) é um projeto colaborativo open source que documenta tecnologias de plataforma da Web, como HTML, CSS, JavaScript e APIs da Web. Eles também fornecem uma grande coleção de recursos aprendizagem para devs e estudantes iniciantes, como uma [trilha de estudos](https://developer.mozilla.org/pt-BR/docs/Learn/Front-end_web_developer) para desenvolvimento front-end, que você pode acessar em inglês ou português. Top, né? \n\n Nessa área, o MDN se propõe a levar você de iniciante a confortável, para que, a partir desse conhecimento básico, você trilhe seu caminho no mundo da programação. E caso você tenha dúvidas ou fique preso em um problema, eles também disponibilizam um fórum para que você poste sua pergunta e outras pessoas possam te ajudar.  \n\n ### Coderwall \n\n O [Coderwall](https://coderwall.com/t/web/popular)  é uma comunidade de devs  para aprender e compartilhar dicas de programação. Há uma seção de dicas específicas para ajudar a resolver problemas ou aprender coisas novas, separadas por tags. Você pode pesquisar “front-end”, por exemplo, e irá encontrar tudo relacionado ao assunto. \n\n Além de existir muitos recursos para iniciantes e devs mais experientes, também há áreas exclusivas para dicas de JavaScript, CSS, HTML, Python, Ruby, iOS e vários outros assuntos, em que você tem total liberdade para perguntar ou postar dicas.  \n\n Um ponto importante é que a maior parte do conteúdo é em inglês, mas isso não precisa ser um empecilho, pois você pode usar o recurso de tradução caso queira, como o [Google Tradutor](https://translate.google.com.br/?hl=pt-BR) ou o [DeepL](https://www.deepl.com/translator). \n\n  ### WoMakersCode \n\n A [WoMakersCode](https://www.linkedin.com/company/womakerscode/) tem a missão de inspirar e impulsionar meninas e mulheres que desejam ingressar ou se especializar em carreiras ligadas à tecnologia e inovação. Dessa forma, é uma organização que cria várias iniciativas de capacitação, mentoria, empregabilidade e conteúdos digitais. Ou seja, você mulher que se sente sozinha nessa área, onde os homens ainda são maioria, tem a possibilidade de se conectar com outras mulheres e aprender muito com elas. \n\n A organização também disponibiliza várias palestras, workshops e feira de vagas que você pode se inscrever através [desse link](https://linktr.ee/womakerscode) de forma online e gratuita. E olha só que demais: se quiser, você pode se inscrever para ser palestrante voluntária. \n\n ### She's Tech \n\n A She’s Tech tem três pilares: inspirar, engajar e capacitar. Ela atua pela conscientização do mercado sobre a diversidade, inclusão e estimula a auto-aceleração através da liderança e protagonismo. \n\n Além disso, por meio dela, diversos eventos online e gratuitos são promovidos, onde outras mulheres que já estão atuando na área da tecnologia repassam o que aprenderam durante a vida. Essa comunidade também possui um [grupo no telegram](https://t.me/shestech) para postar e compartilhar oportunidades de trabalho, eventos e cursos para mulheres. \n\n ### Minas Programam \n\n O [Minas Programam](http://minasprogramam.com/) foi criado para desafiar  a influência dos estereótipos de gênero e de raça na relação de mulheres com as áreas de ciências, tecnologia e computação, de acordo com as criadoras. \n\n É um projeto que dá oportunidades de aprendizado sobre programação para meninas e mulheres (cis ou trans) e pessoas não-binárias, especialmente aquelas que são negras ou indígenas, por meio de cursos gratuitos, dicas de livros, oficinas e apoio para as futuras devs que não têm um computador para começar a programar. \n\n ### Comunidades Tech \n\n O [Comunidades Tech](https://comunidades.tech/) é um projeto open source, onde você pode pesquisar por vários grupos de tecnologia e filtrar por: categoria, tipo, cidade, país, nome da comunidade, entre outros. Após escolher qual você quer participar, é só clicar para encontrar os links de entrada do grupo, que podem ser no discord, facebook, slack, meetup, telegram, whatsapp e até em podcast. \n\n Você também pode criar seu próprio grupo e cadastrar lá para que outras pessoas encontrem e sua comunidade cresça. \n\n ## Conclusão \n\n Muito legal né? E você, já participa de comunidades?  \n\n Sempre há novidades no mundo da programação e mergulhar em comunidades é muito importante para o seu desenvolvimento como dev. Se você já participa, usufrua de tudo o que ela tem para oferecer, ajude as pessoas, participe de conversas, vá aos encontros e palestras. \n\n Lembrando que se você é estudante da Alura temos a nossa própria comunidade no discord, onde você pode pedir ajuda e ajudar várias pessoas. Todas as pessoas estão sempre dispostas a dar aquela dica incrível ou achar o motivo daquele erro que você não consegue encontrar por nada.  \n\n Afinal, ninguém consegue fazer tudo só! Se você ainda não faz parte, venha e se encante.  \n\n Vou deixar [aqui o link](https://cursos.alura.com.br/extra/alura-mais/comunidade-no-discord-c1400)  para o Alura+ do João Manoel sobre a comunidade da Alura no discord, onde ele mostra como você faz para entrar e explica tudo sobre como utilizar esse aplicativo. Caso você não tenha muita familiaridade, indico muito que assista.  \n\n Ah! E se tiver mais dicas de comunidade indique pra gente lá no nosso canal do discord, tenho certeza que todo mundo vai gostar.  \n\n Agora é com você! Pesquise sobre as comunidades e participe das que gostar mais.  \n\n "
    },
    {
        "id": 7,
        "titulo": "Hill Climbing: Uma Aplicação Prática",
        "texto": "> Fonte: <https://www.alura.com.br/artigos/como-aplicar-validacao-formularios-reativos-angular> \n\n  Você já deve ter preenchido um formulário que não indicava claramente o porquê de algum campo não estar válido e teve que ficar adivinhando quantos caracteres sua senha precisava ter ou que tipo de caracteres deveria receber. Ou, em um formulário longo, já ocorreu de preencher apenas os campos que achava serem requeridos e só no final, ao tentar submeter os dados, se deparou com inúmeras mensagens de erro mostrando que diversos outros campos eram obrigatórios? Chato, né? Vem aprender como melhorar essa experiência com o uso das validações customizadas do Angular!\n\nNeste artigo, você vai aprender como:\n\n\n\n- Criar um formulário reativo;\n\n- Aplicar validações padrão e criar validações customizadas;\n\n- Mostrar os erros de validação apenas quando o campo for acessado;\n\n- Habilitar o botão de submeter os dados apenas quando o formulário estiver válido.\n\n\n\nVamos lá?\n\n\n\nCriar formulários é algo muito comum na rotina de devs front-end. Tanto em formulários mais simples e, principalmente à medida que a quantidade de campos do formulário cresce, é necessário implementar validações. \n\n\n\nAs validações são importantes para prevenir erros de cadastro e garantir que as informações preenchidas estejam no formato esperado, mas é preciso deixar claro todas as particularidades dos campos a serem preenchidos, a fim de promover uma interação mais dinâmica e amigável das pessoas com nossa aplicação. \n\n\n\n## O que são formulários reativos?\n\n\n\nNo Angular, existem dois tipos diferentes de formulários: *template drive* e *data driven*. Os do tipo *template driven* são criados e configurados no `component.html`; as validações também são incluídas no template e os valores do formulário são submetidos através da diretiva *ngSubmit*.\n\n\n\nJá os formulários *data driven* (orientados a dados) são criados e configurados no `component.ts` e a maior parte do código fica nesse arquivo e não no html. Dessa forma, temos um template mais limpo, apenas com a estrutura básica do formulário, já que todas as validações são feitas no componente. No html é feita a associação do template ao componente e não precisamos obrigatoriamente do *ngSubmit*.\n\n\n\nFáceis de criar e de dar manutenção, os formulários reativos, como também são conhecidos, são bastante utilizados devido ao seu poder e capacidade de conseguir reagir a mudanças que acontecem no formulário, utilizando [observables](https://www.alura.com.br/curso-online-angular-rxjs-introducao-programacao-reativa). \n\n\n\nAgora nós vamos entender como podemos criar um formulário reativo e aplicar validações nele. \n\n\n\n## O que precisamos configurar?\n\n\n\nCom a aplicação criada, precisamos importar o `reactiveformsModule` no arquivo `app.module.ts` e colocar no array de *imports* do `ngModule`, assim:\n\n\n\n```\n\nimport { ReactiveFormsModule } from '@angular/forms';\n\n\n\n@NgModule({\n\n  declarations: [\n\nAppComponent\n\n  ],\n\n  imports: [\n\nBrowserModule,\n\nAppRoutingModule,\n\nReactiveFormsModule\n\n  ],\n\n  providers: [],\n\n  bootstrap: [AppComponent]\n\n})\n\n\n\nexport class AppModule { }\n\n```\n\n\n\nSe você tem dúvidas nesse passo, [veja aqui como começar com o Angular](https://www.alura.com.br/artigos/como-comecar-com-angular) e [como criar sua primeira aplicação](https://www.alura.com.br/artigos/criando-aplicacoes-angular-com-angular-cli).\n\n\n\nAgora, vamos criar no “app.component.ts” uma variável chamada formulario do tipo **FormGroup** (deve ser importado também), que é uma classe do Angular que vai nos ajudar na implementação e validação dos forms. Outra classe importante que veremos mais à frente é o **FormControl**.\n\n\n\n```\n\nimport { FormGroup } from '@angular/forms';\n\n\n\nformulario: FormGroup;\n\n```\n\n\n\nA abordagem que vamos utilizar para criar nosso formulário é através da injeção de dependência do *service* **FormBuilder**. Esse serviço fornece métodos para gerar controles de formulários e evita a criação manual de instâncias de controle. Para isso vamos ter que:  \n\n\n\n- Importar a classe FormBuilder;\n\n- Injetar o service FormBuilder;\n\n- Gerar o conteúdo do formulário.\n\n\n\nVamos criar um formulário com 4 campos:\n\n\n\n- nome\n\n- username\n\n- email\n\n- senha\n\n\n\nNosso `app.component.ts` ficará assim:\n\n\n\n```\n\nimport { Component } from '@angular/core';\n\nimport { FormBuilder, FormGroup } from '@angular/forms';\n\n\n\n@Component({\n\n  selector: 'app-root',\n\n  templateUrl: './app.component.html',\n\n  styleUrls: ['./app.component.css']\n\n})\n\nexport class AppComponent {\n\n\n\n  formulario: FormGroup;\n\n\n\n  constructor(private formBuilder: FormBuilder) { }\n\n\n\n  ngOnInit(): void {\n\nthis.formulario = this.formBuilder.group({\n\nnome: [''],\n\nusername: [''],\n\nemail: [''],\n\nsenha: ['']\n\n});\n\n  }\n\n}\n\n```\n\n\n\nTambém precisamos criar a estrutura do formulário no template com os quatro campos. Agora, antes de implementar as validações, vamos fazer a sincronização do formulário criado no componente com o template para vermos se está tudo certo.\n\n\n\nPara isso podemos usar uma diretiva do `ReactiveFormsModule` chamada **formGroup**. E na tag *form* do html vamos atribuir a diretiva à nossa variável *formulario* e fazer um *property binding*, porque sempre que o campo for modificado, queremos atualizar e atribuir o valor ao formulário.\n\n\n\n```\n\n<form [formGroup]=\"formulario\"></form>\n\n```\n\n\n\nPara associar cada input utilizamos outra diretiva chamada **formControlName**, fazendo um link entre o campo no html e o componente e passando exatamente o nome das variáveis que criamos através do FormBuilder.\n\n\n\n```\n\n<input id=\"nome\" type=\"text\" formControlName=\"nome\" >\n\n<input id=\"username\" type=\"text\" formControlName=\"username\" >\n\n<input id=\"email\" type=\"email\" formControlName=\"email\" >\n\n<input id=\"senha\" type=\"password\" formControlName=\"senha\" >\n\n```\n\n\n\nNosso formulário está assim (estilizado com o [Angular Material](https://material.angular.io/)). \n\n\n\n ## Aplicando as validações\n\n\n\nAgora, vamos incluir as seguintes validações na aplicação:\n\n\n\n- Todos os campos serão de preenchimento obrigatório;\n\n- O campo username aceitará apenas letras minúsculas;\n\n- Verificação do preenchimento correto do formato de e-mail;\n\n- Quantidade mínima de caracteres para a senha será 6.\n\n\n\nPara começar, vamos importar a classe **Validators**:\n\n\n\n```\n\nimport { Validators } from '@angular/forms';\n\n```\n\n\n\nEssa classe já traz vários métodos de validação prontos e fáceis de usar como por exemplo:\n\n\n\n- required() - campo de preenchimento obrigatório;\n\n- maxLength() - quantidade máxima de caracteres permitido;\n\n- minLength() - quantidade mínima de caracteres permitido;\n\n- email() - valida o formato de e-mail;\n\n\n\n[Veja aqui a lista completa de métodos da classe Validators](https://angular.io/api/forms/Validators).\n\n\n\nAgora vamos implementar as validações no formulário, passando os métodos de validação como segundo parâmetro do array criado no `component.ts`. \n\n\n\n```\n\nngOnInit(): void {\n\nthis.formulario = this.formBuilder.group({\n\nnome: ['', [Validators.required]],\n\nusername: ['',  [Validators.required]],\n\nemail: ['', [Validators.required, Validators.email]],\n\nsenha: ['', [Validators.required, Validators.minLength(6)]]\n\n});\n\n  }\n\n```\n\n\n\n## Exibindo mensagens de erro\n\n\n\nPara exibir mensagens referentes às validações, vamos incluir no html, abaixo do input, uma div com a diretiva *ngIf, passando o formulário e pegando os erros do campo passado como parâmetro, e incluindo a mensagem que queremos apresentar:\n\n\n\n```\n\n<div *ngIf=\"formulario.get('nome')?.errors>\n\nNome obrigatório\n\n</div>\n\n```\n\n\n\nVamos replicar isso em cada campo e ver o resultado:\n\n\n\nOk, agora as mensagens estão aparecendo, mas já no carregamento inicial da aplicação. Será que existe uma forma mais amigável de apresentá-las? Apenas quando o campo for acessado? Sim!! Podemos fazer isso através de uma propriedade do FormControl chamada **touched**. Seu valor inicial é *false* e sempre que o input dispara o evento *onBlur*, ou seja, quando o campo é acessado e perde o foco, a propriedade recebe o valor *true*.\n\n\n\nNo exemplo do campo *nome* ficará assim: \n\n\n\n```\n\n<div *ngIf=\"formulario.get('nome')?.errors?.['required'] && formulario.get('nome')?.touched>\n\nNome obrigatório\n\n</div>\n\n```\n\n\n\nReplicando para os outros campos, agora as mensagens de erro aparecem apenas quando necessário.\n\n\n\n ## Criando validações customizadas\n\n\n\nA validação que queremos incluir para que o campo username receba apenas letras minúsculas não está presente na classe ``Validators``. Mas não tem problema, pois é possível criar inúmeras validações customizadas que atendam às suas necessidades.\n\nNo nosso exemplo, criamos um arquivo chamado `minusculoValidator.ts`, importamos a classe **Abstract Control** e criamos a lógica da validação. \n\n\n\n`minusculoValidator.ts`:\n\n```\n\nimport { AbstractControl } from \"@angular/forms\";\n\n\n\nexport function minusculoValidator(control: AbstractControl) {\n\nconst username = control.value as string;\n\nif(username !== username?.toLowerCase()) {\n\nreturn { minusculo: true };\n\n} else\n\nreturn null;\n\n}\n\n```\n\n\n\nDepois disso, importamos a validação no componente e incluímos no array junto com as outras validações.\n\n\n\n`app.component.ts`:\n\n```\n\nusername: ['',  [Validators.required, minusculoValidator]],\n\n```\n\n\n\n`app.component.html`:\n\n```\n\n<div *ngIf=\"formulario.get('username')?.errors?.['minusculo’] && formulario.get('username')?.touched\">\n\nEsse campo aceita apenas letras minúsculas\"\n\n</div>\n\n```\n\n\n\nAssim, através da propriedade *errors*, podemos criar mensagens customizadas dependendo do erro que seja disparado.\n\n\n\n## Desabilitar/Habilitar o botão\n\n\n\nOutro ponto importante é que o botão para envio dos dados está habilitado desde o início, mesmo que os campos não tenham sido preenchidos. Vamos resolver isso?\n\n\n\nO formulário possui a propriedade *valid* e podemos fazer um property binding atribuindo-a à propriedade disabled do botão e assim criar uma lógica para que o botão fique habilitado apenas quando o formulário estiver válido, ou seja, quando todos os campos forem preenchidos corretamente.\n\n\n\n`app.component.html`:\n\n```\n\n<button [disabled]=\"!formulario.valid\">\n\nCadastre-se\n\n</button>\n\n```\n\n\n\n"
    },
    {
        "id": 8,
        "titulo": "QuickSort: Entendendo o Algoritmo",
        "texto": "> Fonte: <https://www.alura.com.br/artigos/svelte-versus-react-quais-diferencas> \n\n  Inegavelmente, o [React é a ferramenta que **atualmente domina o mercado front-end**](https://www.alura.com.br/formacao-react-ts), sendo a mais utilizada de acordo com a [pesquisa de 2020 do State of JS](https://2020.stateofjs.com/en-US/technologies/front-end-frameworks/), seguida de seus concorrentes Angular e Vue.js. Essa demanda também é notável quando pesquisamos por vagas em plataformas de empregos. \n\nPorém, uma nova ferramenta vem ganhando força nos últimos anos e superou todas as outras nessa mesma pesquisa no quesito **satisfação**: o Svelte. \n\n \n\n## Mas o que é o Svelte? \n\n \n\nO [Svelte](https://svelte.dev/) é um **compilador** utilizado para construir interfaces web, assim como React, Angular e Vue.js. Ele foi criado em 2016 por Rich Harris, e vem com a proposta de ser mais performático, fácil de aprender e utilizar, possuindo uma alta curva de aprendizagem, além da sintaxe simples e intuitiva. \n\n \n\nO Svelte em si é muito leve: [4.4kB, ou 1.6 kB comprimido](https://bundlephobia.com/package/svelte@3.43.2), custando muito menos para os navegadores baixarem os arquivos. Para comparação, os pacotes [react](https://bundlephobia.com/package/react@17.0.2) e [react-dom](https://bundlephobia.com/package/react@17.0.2), juntos, somam 126kB, ou 42.2kB comprimidos. \n\n \n\n## Como funciona um compilador no front-end? \n\n \n\nO compilador do Svelte lê o código que escrevemos e o **compila** para JavaScript puro, [sem utilizar Virtual DOM](https://svelte.dev/blog/virtual-dom-is-pure-overhead). O código gerado é [extremamente performático](https://krausest.github.io/js-framework-benchmark/2022/table_chrome_99.0.4844.51.html) em relação aos seus concorrentes. \n\n \n\nVocê também pode ver o processo de compilação na prática, utilizando o [REPL](https://svelte.dev/repl/hello-world), uma ferramenta criada pelo Svelte, onde podemos testar nossos códigos online e ver os arquivos JS gerados. \n\n \n\n> Dica: utilize o REPL para testar os exemplos deste artigo! \n\n \n\nAgora que você entende como funciona o Svelte e o quão performático ele é, vamos compará-lo com o React, com alguns exemplos de código! \n\n \n\n## Comparação de código Svelte vs React \n\n \n\n### Estrutura de um componente \n\n \n\nVamos considerar o seguinte código React: \n\n \n\n``` \n\nimport './App.css'; \n\nimport { useState } from 'react'; \n\n \n\nfunction App() { \n\n  const [nome, setNome] = useState('World'); \n\n \n\n  return ( \n\n<div className=\"App\"> \n\n<h1>Hello {nome}!</h1> \n\n</div> \n\n  ); \n\n} \n\n \n\nexport default App; \n\n``` \n\n \n\nCom o Svelte, o mesmo código acima ficaria assim: \n\n \n\n``` \n\n<script> \n\nlet nome = 'World'; \n\n</script> \n\n \n\n<main> \n\n<h1>Hello {nome}!</h1> \n\n</main> \n\n \n\n<style> \n\nmain { \n\n/* estilos de main */ \n\n} \n\n \n\nh1 { \n\n/* estilos de h1 */ \n\n} \n\n</style> \n\n``` \n\n \n\nO Svelte utiliza a estrutura **Single File Component** (Componente de Arquivo Único), onde deixamos HTML, CSS e JS em um mesmo arquivo com extensão `.svelte`. Vemos no exemplo acima que o JS fica dentro da tag `<script>`, o CSS dentro da `<style>` e o HTML não precisa ser delimitado por alguma tag. Além disso, essas partes podem vir em qualquer ordem, então o código abaixo também é válido: \n\n \n\n``` \n\n<style> \n\nh1 { \n\n/* estilos de h1 */ \n\n} \n\n</style> \n\n \n\n<h1>Hello {nome}!</h1> \n\n<p> \n\nMinha primeira aplicação Svelte! \n\n</p> \n\n \n\n<script> \n\nlet nome = 'World'; \n\n</script> \n\n``` \n\n \n\nNote também que o HTML do componente não precisa ser envolto por uma tag, como no exemplo acima, que utilizamos as tags `<h1>` e `<p>`. \n\n \n\n### Estado \n\n \n\nEm React, para criarmos um estado, precisamos explicitá-lo no código utilizando `useState`. Já no Svelte, qualquer variável que criamos com a palavra-chave `let` se torna um estado por padrão. \n\n \n\nAinda, em React, se quisermos alterar o estado `nome` para um novo valor no clique de um botão, podemos escrever o seguinte: \n\n \n\n``` \n\n<button onClick={() => setNome('Antônio')} disabled={nome === 'Antônio'}> \n\nAlterar nome \n\n</button> \n\n``` \n\n \n\nO código acima ficaria assim em Svelte: \n\n \n\n``` \n\n<button on:click={() => nome = 'Antônio'} disabled={nome === 'Antônio'}> \n\nAlterar nome \n\n</button> \n\n``` \n\n \n\nRepare que utilizamos a diretiva [on:](https://svelte.dev/tutorial/dom-events) para escutar o evento de `click` do botão. Note também que precisamos apenas fazer uma atribuição direta ao estado `nome`, e a interface do componente será re-renderizada de acordo com a mudança. Trata-se de uma sintaxe intuitiva e prática, especialmente, quando trabalhamos com objetos e arrays. \n\n \n\n> Diretivas são como “atributos especiais” que colocamos em tags do HTML. Elas já são conhecidas em Angular e Vue.js, e são um recurso poderoso, que podem nos ajudar de diversas formas no nosso desenvolvimento. \n\n \n\n### Two-way data binding \n\n \n\nVamos criar um input que altera o estado `nome` que criamos no código React, utilizando a função `setNome`: \n\n \n\n``` \n\n<input \n\ntype=\"text\" \n\nvalue={nome} \n\nonChange={(e) => setNome(e.target.value)}   \n\n/> \n\n``` \n\n \n\nNote que precisamos declarar o atributo `value={nome}` para que o estado defina o valor inicial do campo, e também declarar o atributo `onChange={(e) => setNome(e.target.value)}` para que as alterações no campo alterem o estado também. \n\n \n\nNo Svelte, podemos simplificar essas operações utilizando a seguinte sintaxe: \n\n \n\n``` \n\n<input type=\"text\" bind:value={nome} /> \n\n``` \n\n \n\nUsamos a diretiva [bind:](https://svelte.dev/tutorial/text-inputs) para fazer um **Two-way data binding** (Ligação de dados bidirecional) que, nesse caso, serve para **ligar** (ou **vincular**) um atributo do HTML a um estado. Dessa forma, o atributo `value` e o estado `nome` sempre possuirão o mesmo valor. \n\n \n\n### Estilos escopados \n\n \n\nNo React, por padrão, os estilos não são escopados, ou seja, se arquivos CSS declararem estilos para um mesmo seletor, esses estilos irão interferir entre si. Soluções possíveis são utilizar módulos CSS ou Styled Components. \n\n \n\nJá no Svelte, os estilos são [**escopados por padrão**](https://svelte.dev/docs#component-format-style), pois esse é o comportamento que geralmente queremos. Se, por acaso, precisarmos que algum estilo seja global para todos os componentes, podemos escrever a seguinte sintaxe: \n\n \n\n``` \n\n:global(h1) { \n\n/* estilos de h1 */ \n\n} \n\n``` \n\n \n\nUtilizamos o modificador `:global()` e, dentro dos parênteses, colocamos o seletor CSS que queremos globalizar. \n\n \n\n### Estrutura de condição \n\n \n\nNo React, combinamos o JS com JSX para renderizar HTML de forma condicional, como nesse código: \n\n \n\n``` \n\n{ \n\nnome === 'Antônio' \n\n? <p>É meu nome!</p> \n\n: <p>Não é meu nome...</p> \n\n} \n\n``` \n\n \n\nDiferentemente, no Svelte, temos uma estrutura dedicada para essas situações, e o código ficaria assim: \n\n \n\n``` \n\n{#if nome === 'Antônio'} \n\n<p>É meu nome!</p> \n\n{:else} \n\n<p>Não é meu nome...</p> \n\n{/if} \n\n``` \n\n \n\nEsse é o bloco [#if](https://svelte.dev/tutorial/if-blocks) do Svelte, e pode ser utilizado, opcionalmente, com cláusulas `:else if` e `:else`. \n\n \n\n### Estrutura de repetição \n\n \n\nEm React, podemos combinar o JS com JSX para iterar sobre alguma lista e renderizar HTML de acordo com ela. Considere que temos um estado chamado `numeros`, que é um array do JavaScript. Para imprimir um parágrafo para cada item do array, faríamos algo assim: \n\n \n\n``` \n\n{numeros.map((numero) => ( \n\n<p>Número: {numero}</p> \n\n))} \n\n``` \n\n \n\nJá no Svelte, temos um estrutura dedicada para esses casos, e nosso código ficaria assim:  \n\n \n\n``` \n\n{#each numeros as numero} \n\n<p>Número: {numero}</p> \n\n{/each} \n\n``` \n\n \n\nEsse é o bloco [#each](https://svelte.dev/tutorial/else-blocks) do Svelte e ele pode até ser utilizado junto com uma cláusula `:else`, que mostra um HTML caso a lista esteja vazia. \n\n \n\n> Note que esses blocos especiais sempre começam com `#`, “continuam” com `:` (quando há cláusulas) e terminam em `/`. \n\n \n\n### Código reativo \n\n \n\nÀs vezes, no nosso código, é útil guardar valores que dependem de algum estado do componente. Em React, logo após a declaração do estado `nome`, poderíamos adicionar o seguinte código: \n\n \n\n``` \n\nconst meuNome = nome === 'Antônio'; \n\n``` \n\n \n\nAssim, podemos utilizar `meuNome` no botão e no condicional: \n\n \n\n``` \n\n<button onClick={() => setNome('Antônio')} disabled={meuNome}> \n\nAlterar nome \n\n</button> \n\n \n\n{ \n\nmeuNome \n\n? <p>É meu nome!</p> \n\n: <p>Não é meu nome...</p> \n\n} \n\n``` \n\n \n\nDessa forma, evitamos repetição de código, além de aumentarmos a legibilidade e a facilidade de manutenção. Entretanto, o código `const meuNome = nome === 'Antônio';` é executado sempre que o componente é re-renderizado, mesmo que essa renderização tenha sido causada por um estado que não fosse `nome`. \n\n \n\nPor outro lado, no Svelte, todo o código dentro da tag `<script>` é executado uma única vez, quando o componente é renderizado pela primeira vez na tela. Então, como faríamos para replicar a situação acima? \n\n \n\nNa tag `<script>`, podemos adicionar o seguinte código: \n\n \n\n``` \n\n$: meuNome = nome === 'Antônio'; \n\n``` \n\n \n\nAssim, no HTML, podemos utilizar `meuNome`: \n\n \n\n``` \n\n<button on:click={() => nome = 'Antônio'} disabled={meuNome}> \n\nAlterar nome \n\n</button> \n\n \n\n{#if meuNome} \n\n<p>É meu nome!</p> \n\n{:else} \n\n<p>Não é meu nome...</p> \n\n{/if} \n\n``` \n\n \n\nA sintaxe [$:](https://svelte.dev/tutorial/reactive-statements) indica que um código deve ser reativo! O Svelte identifica quais estados estão sendo utilizados nessa sintaxe e executa o código quando algum desses estados é alterado. Assim, `meuNome = nome === 'Antônio'` é executado somente quando o estado `nome` for alterado. \n\n \n\n> Se você já trabalhou com Vue.js, talvez tenha lembrado das *computed properties* (propriedades computadas). De fato, a “sintaxe de dólar” funciona praticamente da mesma forma. \n\n \n\n### E não para por aí… \n\n \n\nFizemos a comparação entre conceitos fundamentais do Svelte e do React, mas ainda levaríamos vários artigos para cobrirmos mais diferenças importantes! Algumas delas: \n\n \n\n- **Comunicação entre componentes**: no React, a comunicação básica entre componentes se dá de forma unidirecional e sempre do pai para o filho, através de props. Já o Svelte fornece várias opções pra gente, como props, [dispatch](https://svelte.dev/tutorial/component-events) (filho para o pai) e [bind](https://svelte.dev/tutorial/component-bindings) (comunicação bidirecional). \n\n \n\n- **Composição de componentes**: no React, para passarmos conteúdos mais complexos para um componente filho, podemos utilizar `children`. No Svelte, utilizamos o [`slot`](https://svelte.dev/tutorial/slots), que nos dá uma grande variedade de recursos, como definir um conteúdo padrão (*fallback*), configurar o recebimento de mais de um conteúdo (*named slots*), entre outros. \n\n \n\n- **Métodos de ciclo de vida**: na abordagem funcional do React, o controle dos ciclos de vida de um componente é unificado no hook `useEffect()`. O Svelte prefere separar essas responsabilidades em [diferentes métodos](https://svelte.dev/tutorial/onmount): `onMount()`, `beforeUpdate()`, `afterUpdate()` e `onDestroy()`. Mas também temos a opção de retornar uma função para o método `onMount()`, e ela será executada quando o componente for destruído, ou seja, como se ela estivesse no método `onDestroy()`. \n\n \n\n- **Gerenciamento de estado**: no React, podemos optar pela solução nativa, a Context API, ou alguma biblioteca externa, como Redux. No Svelte, temos duas soluções nativas: as [Stores](https://svelte.dev/tutorial/writable-stores), para gerenciamento de estado global, e uma [Context API](https://svelte.dev/tutorial/context-api) também, para casos mais específicos. \n\n \n\n## Resumindo, Svelte é melhor que React? \n\n \n\nApesar de todos os benefícios citados, o Svelte ainda é uma **tecnologia em ascensão**, e não possui tantas oportunidades de emprego quanto seus concorrentes. \n\n \n\nPor outro lado, ele já é utilizado por empresas como Spotify, The New York Times, Avast, Philips, e outras, como podemos ver na [página principal do Svelte](https://svelte.dev/) e [nessa página da extensão Wappalyzer](https://www.wappalyzer.com/technologies/javascript-frameworks/svelte), que analisa quais sites utilizam determinada tecnologia. \n\n O React ainda lidera o mercado e as vagas de emprego. Mas nós, pessoas desenvolvedoras front-end, devemos sempre nos manter atualizadas de novas tecnologias, principalmente, quando possuem um grande potencial de crescimento, como o Svelte. Além disso, estudar diferentes ferramentas front-end é uma excelente forma de reforçar conceitos e de apurar nosso senso crítico, fazendo-nos questionar as decisões que foram tomadas na construção de uma determinada tecnologia. \n\n \n\nPara conferir todos os recursos do Svelte citados neste artigo, você pode visitar o [tutorial](https://svelte.dev/tutorial/basics) ou a [documentação](https://svelte.dev/docs).  \n\n \n\nConfira também esse Hipster Ponto Tube: [Como trabalhar com Framework SVELTE? Com Mario Souto](https://www.youtube.com/watch?v=1F7r0G0hFcE). \n\n"
    }
]